language: cpp

dist: trusty
sudo: required

matrix:
  include:
    - os: linux
      compiler: gcc
      env: COMPILER=g++-5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-5']

    - os: linux
      compiler: gcc
      env:
        COMPILER=g++-6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-6']

    - os: linux
      compiler: gcc
      env:
        COMPILER=g++-6
        COLLECT_COVERAGE=1
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-6', 'lcov']

    - os: linux
      compiler: gcc
      env: COMPILER=g++-7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-7']

    - os: linux
      compiler: gcc
      env:
        COMPILER=g++-7
        EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-7']

    - os: linux
      compiler: clang
      env: COMPILER=clang++-5.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['cmake', 'clang-5.0', 'g++-7']

    - os: linux
      compiler: clang
      env: COMPILER=clang++-6.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
          packages: ['cmake', 'clang-6.0', 'g++-7']

    - os: linux
      compiler: clang
      env:
        COMPILER=clang++-6.0
        EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
          packages: ['cmake', 'clang-6.0', 'g++-7']

before_install:
  - date -u
  - uname -a
  - if [[ "${SYSTEM_BOOST_PACKAGE}" != "" ]]; then sudo add-apt-repository -y ppa:samuel-bachmann/boost && sudo apt-get update -qq; fi

install:
  - if [[ "${SYSTEM_BOOST_PACKAGE}" != "" ]]; then sudo apt-get install libboost1.60-all-dev; fi

script:
  - export BUILD_TARGET="all"
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - if [[ "${BUILD_CONFIG}" == "" ]]; then export BUILD_CONFIG="Release"; fi
  - if [[ "${COLLECT_COVERAGE}" != "" ]]; then export BUILD_CONFIG="Debug" && export CMAKE_OPTS="-DCOVERAGE_ENABLED=TRUE"; fi
  - $CXX --version

  - mkdir -p build && cd build
  - cmake $CMAKE_OPTS -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_CXX_FLAGS=$CMAKE_CXX_FLAGS -DJINJA2CPP_DEPS_MODE=internal $EXTRA_FLAGS .. && cmake --build . --config $BUILD_CONFIG --target all -- -j4
  - ctest -C $BUILD_CONFIG -V


after_success:
    # Creating report
  - echo "Uploading code coverate report"
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info #debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) -t "225d6d7a-2b71-4dbe-bf87-fbf75eb7c119" || echo "Codecov did not collect coverage reports"
  - fi
