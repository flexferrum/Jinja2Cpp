--- 
after_success: 
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then echo \"Uploading code coverate report\" ; fi"
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then lcov --directory . --capture --output-file coverage.info ; fi"
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then lcov --remove coverage.info '/usr/*' --output-file coverage.info ; fi"
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then lcov --list coverage.info ; fi"
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then bash <(curl -s https://codecov.io/bash) -t \"225d6d7a-2b71-4dbe-bf87-fbf75eb7c119\" || echo \"Codecov did not collect coverage reports\"; fi"
before_install: 
  - "date -u"
  - "uname -a"
  - "if [[ \"${SYSTEM_BOOST_PACKAGE}\" != \"\" ]]; then sudo add-apt-repository -y ppa:samuel-bachmann/boost && sudo apt-get update -qq; fi"
dist: xenial
install: 
  - "if [[ \"${SYSTEM_BOOST_PACKAGE}\" != \"\" ]]; then sudo apt-get install libboost1.60-all-dev; fi"
language: cpp
matrix: 
  include: 
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-5
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: COMPILER=g++-5
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-6
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: COMPILER=g++-6
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: COMPILER=g++-7
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-7 EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-8
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-8 EXTRA_FLAGS=-DJINJA2CPP_STRICT_WARNINGS=OFF"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-8
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-8 EXTRA_FLAGS='-DJINJA2CPP_CXX_STANDARD=17 -DJINJA2CPP_STRICT_WARNINGS=OFF'"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-9
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-9 EXTRA_FLAGS=-DJINJA2CPP_STRICT_WARNINGS=OFF"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-9
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-9 EXTRA_FLAGS='-DJINJA2CPP_CXX_STANDARD=17 -DJINJA2CPP_STRICT_WARNINGS=OFF'"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-5.0
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-5.0
      compiler: clang
      env: COMPILER=clang++-5.0
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-6.0
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
      compiler: clang
      env: COMPILER=clang++-6.0
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-6.0
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
      compiler: clang
      env: "COMPILER=clang++-6.0 EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-7
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-7
      compiler: clang
      env: COMPILER=clang++-7
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-7
            - g++-7
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-7
      compiler: clang
      env: "COMPILER=clang++-7 EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-8
            - g++-8
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
      compiler: clang
      env: COMPILER=clang++-8
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-8
            - g++-8
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
      compiler: clang
      env: "COMPILER=clang++-8 EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17"
      os: linux
    - 
      compiler: clang
      env: COMPILER='clang++'
      os: osx
      osx_image: xcode9
    - 
      compiler: clang
      env: COMPILER='clang++'
      os: osx
      osx_image: xcode10
    - 
      compiler: clang
      env: COMPILER='clang++'
      os: osx
      osx_image: xcode11
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - g++-6
            - lcov
          sources: 
            - ubuntu-toolchain-r-test
      compiler: gcc
      env: "COMPILER=g++-6 COLLECT_COVERAGE=1"
      os: linux
    - 
      addons: 
        apt: 
          packages: 
            - cmake
            - clang-8
            - g++-8
          sources: 
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
      compiler: clang
      env: "COMPILER=clang++-8 EXTRA_FLAGS=-DJINJA2CPP_CXX_STANDARD=17 SANITIZE_BUILD=address+undefined"
      os: linux
script: 
  - "export BUILD_TARGET=\"all\""
  - "export CMAKE_OPTS=\"-DCMAKE_VERBOSE_MAKEFILE=OFF\""
  - "if [[ \"${COMPILER}\" != \"\" ]]; then export CXX=${COMPILER}; fi"
  - "if [[ \"${BUILD_CONFIG}\" == \"\" ]]; then export BUILD_CONFIG=\"Release\"; fi"
  - "if [[ \"${COLLECT_COVERAGE}\" != \"\" ]]; then export BUILD_CONFIG=\"Debug\" && export CMAKE_OPTS=\"${CMAKE_OPTS} -DJINJA2CPP_WITH_COVERAGE=ON\"; fi"
  - "if [[ \"${SANITIZE_BUILD}\" != \"\" ]]; then export BUILD_CONFIG=\"RelWithDebInfo\" && export CMAKE_OPTS=\"${CMAKE_OPTS} -DJINJA2CPP_WITH_SANITIZERS=${SANITIZE_BUILD}\"; fi"
  - "$CXX --version"
  - "mkdir -p build && cd build"
  - "cmake $CMAKE_OPTS -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_CXX_FLAGS=$CMAKE_CXX_FLAGS -DJINJA2CPP_DEPS_MODE=internal $EXTRA_FLAGS .. && cmake --build . --config $BUILD_CONFIG --target all -- -j4"
  - "ctest -C $BUILD_CONFIG -V"
sudo: required
