name: CI-linux-build

on: push

build-prepare-run: &build_prepare |
  export BUILD_TARGET=all
  export CMAKE_OPTS=-DCMAKE_VERBOSE_MAKEFILE=OFF
  if [[ "${INPUT_COMPILER}" != "" ]]; then export CXX=${INPUT_COMPILER}; fi
  export BUILD_CONFIG=${INPUT_BUILD_CONFIG}
  $CXX --version
  export EXTRA_FLAGS="${INPUT_BASE_FLAGS} ${INPUT_EXTRA_FLAGS}"
  
build-run: &build |
  mkdir -p .build && cd .build
  cmake $CMAKE_OPTS -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_CXX_FLAGS=$CMAKE_CXX_FLAGS -DJINJA2CPP_DEPS_MODE=internal $EXTRA_FLAGS .. && cmake --build . --config $BUILD_CONFIG --target all -- -j4
  
test-run: &test |
  cd .build && ctest -C $BUILD_CONFIG -V    

jobs:
  linux-gcc-build:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc-8, gcc-6, gcc-7, gcc-5, gcc-9]
        base-flags: ["", -DJINJA2CPP_CXX_STANDARD=17]
        build-config: [Release, Debug]

        include:
          - compiler: gcc-8
            extra-flags: -DJINJA2CPP_STRICT_WARNINGS=OFF
          - compiler: gcc-9
            extra-flags: -DJINJA2CPP_STRICT_WARNINGS=OFF
        
        exclude:
          - compiler: gcc-5
            base-flags: -DJINJA2CPP_CXX_STANDARD=17
          - compiler: gcc-6
            base-flags: -DJINJA2CPP_CXX_STANDARD=17
    
    steps:
    - uses: actions/checkout@v1
    - name: Setup environment
      env:
        INPUT_COMPILER: ${{ matrix.compiler }}
        INPUT_BASE_FLAGS: ${{ matrix.base-flags }}
        INPUT_BASE_CONFIG: ${{ matrix.build-config }}
        INPUT_EXTRA_FLAGS: ${{ matrix.extra-flags }}
      run: |
        sudo apt-get install -y cmake build-essential ${INPUT_COMPILER}
    - name: Prepare build
      env:
        INPUT_COMPILER: ${{ matrix.compiler }}
        INPUT_BASE_FLAGS: ${{ matrix.base-flags }}
        INPUT_BASE_CONFIG: ${{ matrix.build-config }}
        INPUT_EXTRA_FLAGS: ${{ matrix.extra-flags }}
      run: *build_prepare

    - name: Build
      run: *build
      
    - name: Test
      run: *test

  linux-clang-build:

    runs-on: ubuntu-18.04

    strategy:
      matrix:
        compiler: [5.0, 6.0, 7, 8, 9]
        base-flags: ["", -DJINJA2CPP_CXX_STANDARD=17]
        build-config: [Release, Debug]

        exclude:
          - compiler: 5.0
            base-flags: -DJINJA2CPP_CXX_STANDARD=17
    steps:
    - uses: actions/checkout@v1
    - name: Setup environment
      env:
        INPUT_COMPILER: ${{ matrix.compiler }}
        INPUT_BASE_FLAGS: ${{ matrix.base-flags }}
        INPUT_BASE_CONFIG: ${{ matrix.build-config }}
        INPUT_EXTRA_FLAGS: ${{ matrix.extra-flags }}
      run: |
        sudo deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${INPUT_COMPILER} main
        sudo apt-get install -y cmake build-essential clang-${INPUT_COMPILER} gcc-7
    - name: Prepare build
      env:
        INPUT_COMPILER: clang-${{ matrix.compiler }}
        INPUT_BASE_FLAGS: ${{ matrix.base-flags }}
        INPUT_BASE_CONFIG: ${{ matrix.build-config }}
        INPUT_EXTRA_FLAGS: ${{ matrix.extra-flags }}
      run: *build_prepare

    - name: Build
      run: *build
      
    - name: Test
      run: *test

